{
  "name": "connect-mongostore",
  "version": "0.1.4",
  "description": "MongoDB session store for Connect",
  "keywords": [
    "connect",
    "mongo",
    "mongodb",
    "session",
    "express"
  ],
  "author": {
    "name": "Ilya Shaisultanov",
    "email": "ilya.shaisultanov@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/diversario/connect-mongostore.git"
  },
  "bugs": {
    "url": "https://github.com/diversario/connect-mongostore/issues"
  },
  "dependencies": {
    "mongodb": "~1.4",
    "lodash": "~2.4"
  },
  "directories": {
    "lib": "./lib"
  },
  "devDependencies": {
    "mocha": "~1.19",
    "connect": "~2.17",
    "mongoose": "~3.8",
    "coveralls": "~2.10",
    "istanbul": "~0.2",
    "mocha-istanbul": "~0.2"
  },
  "scripts": {
    "test": "make coveralls"
  },
  "main": "index",
  "engines": "node >= 0.8.x",
  "readme": "# connect-mongostore\n\n  MongoDB session store for Connect/Express\n\n  [![Build Status](https://secure.travis-ci.org/diversario/connect-mongostore.png?branch=master)](http://travis-ci.org/diversario/connect-mongostore)\n  [![Coverage Status](https://coveralls.io/repos/diversario/connect-mongostore/badge.png?branch=master)](https://coveralls.io/r/diversario/connect-mongostore?branch=master)\n  [![Dependency Status](https://gemnasium.com/diversario/connect-mongostore.png)](https://gemnasium.com/diversario/connect-mongostore)\n  [![NPM version](https://badge.fury.io/js/connect-mongostore.png)](http://badge.fury.io/js/connect-mongostore)\n  [![Stories in Ready](https://badge.waffle.io/diversario/connect-mongostore.png?label=ready&title=Ready)](https://waffle.io/diversario/connect-mongostore)\n  \n### Why?\n  \n  Existing stores work fine but we needed a store that supports replica sets configuration passed to it.\n\n## Installation\n\nconnect-mongostore supports connect `>= 1.0.3`, express `3.x` and express `4.x` with express-session.\n\nvia npm:\n\n    $ npm install connect-mongostore\n\n## Options\n\n  Pass a fully-qualified URI as the only option (e.g., `mongodb://127.0.0.1:27017/myDatabase`), or an object (also see `examples` folder for configuration examples):\n\n  - `db` Can be three different things:\n    - database name (string)\n    - mongo-native database instance\n    - object with replica set options. These options requires:\n    \n      + `name` Database name\n      + `servers` Array of replica set server configurations similar to:\n\n          ```javascript\n            {\n              \"host\" : \"127.0.0.1\", // required\n              \"port\" : 27017, // required\n              \"options\" : { // all optional\n                \"autoReconnect\" : false,\n                \"poolSize\" : 200,\n                \"socketOptions\" : {\n                  \"timeout\" : 0,\n                  \"noDelay\" : true,\n                  \"keepAlive\" : 1,\n                  \"encoding\" : \"utf8\"\n                }\n              }\n            }\n          ```\n          Configuration options explained [here](http://mongodb.github.io/node-mongodb-native/api-generated/server.html)\n      + `replicaSetOptions` An object with a single `rs_name` property specifying your replica set name\n  - `collection` Collection (optional, default: `sessions`) \n  - `host` MongoDB server hostname (optional, default: `127.0.0.1`). Not needed for Replica Sets.\n  - `port` MongoDB server port (optional, default: `27017`) Not needed for Replica Sets.\n  - `username` Username (optional)\n  - `password` Password (optional)\n  - `authSource` Options for `Db#authenticate` method (optional)\n  - `expireAfter` Duration of session cookies in milliseconds (e.g., ones with `maxAge` not defined). Defaults to 2 weeks.\n    May be useful if you see a lot of orphaned sessions in the database and want them removed sooner than 2 weeks.\n  - `autoReconnect` This is passed directly to the MongoDB `Server` constructor as the auto_reconnect\n                     option (optional, default: false).\n  - `ssl` Use SSL to connect to MongoDB (optional, default: false).\n  - `mongooseConnection` in the form: `mongooseDatabase.connections[0]` to use an existing mongoose connection. (optional)\n  - `stringify` If false, connect-mongostore will serialize sessions using `JSON.stringify` before\n                setting them, and deserialize them with `JSON.parse` when getting them.\n                (optional, default: false). Note that deserialization will not revive Dates, Object IDs and other non-plain objects.\n\n## Example\n\nWith express 3.x:\n\n    var express = require('express');\n    var MongoStore = require('connect-mongostore')(express);\n    var app = express();\n    \n    app.use(express.session({\n        secret: 'my secret',\n        store: new MongoStore({'db': 'sessions'})\n      }));\n\nWith express 4.x:\n\n    var express = require('express');\n    var session = require('express-session');\n    var MongoStore = require('connect-mongostore')(session);\n    var app = express();\n\n    app.use(session({\n        secret: 'my secret',\n        store: new MongoStore({'db': 'sessions'})\n      }));\n\nWith connect:\n\n    var connect = require('connect');\n    var MongoStore = require('connect-mongostore')(connect);\n\n## Removing expired sessions\n\n  connect-mongostore uses MongoDB's TTL collection feature (2.2+) to\n  have mongod automatically remove expired sessions. (mongod runs this\n  check every minute.)\n\n  **Note:** By connect/express's default, session cookies are set to \n  expire when the user closes their browser (maxAge: null). In accordance\n  with standard industry practices, connect-mongostore will set these sessions\n  to expire two weeks from their last 'set'. You can override this \n  behavior by manually setting the maxAge for your cookies - just keep in\n  mind that any value less than 60 seconds is pointless, as mongod will\n  only delete expired documents in a TTL collection every minute.\n\n  For more information, consult connect's [session documentation](http://www.senchalabs.org/connect/session.html).\n\n## Tests\n\nYou need `mocha`.\n\n    make test\n\nThe tests use a database called `connect-mongostore-test`. `make test` **does not** run replica set tests.\n\nTo run all tests including replica set tests:\n\n    make test-rs\n\nNote that replica set tests will fail unless you 1) have a replica set, and 2) set the address of that replica set either in `CM_REPL_SET_HOST` environment variable or directly in `connect-mongostore.test.js` file.\n\nYou can check code coverage report by running\n\n    make coverage\n    \nor\n    \n    make coverage-rs\n        \nfor coverage with replica set tests.\n    \nCoverage report will be in `reports/lcov-report/index.html` file.\n\n\n## Stuff\n\nBig thanks to @kcbanner and his `connect-mongo`, which was a starting point for `connect-mongostore`.\n\n## License \n\n(The MIT License)\n\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/diversario/connect-mongostore",
  "_id": "connect-mongostore@0.1.4",
  "dist": {
    "shasum": "4bea1f705001ca82ee30a83cf34158691da8e6b7"
  },
  "_from": "connect-mongostore@",
  "_resolved": "https://registry.npmjs.org/connect-mongostore/-/connect-mongostore-0.1.4.tgz"
}
